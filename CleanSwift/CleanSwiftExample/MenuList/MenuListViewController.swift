//
//  MenuListViewController.swift
//  CleanSwiftExample
//
//  Created by 최승환 on 2019. 3. 9..
//  Copyright (c) 2019년 최승환. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MenuListDisplayLogic: class
{
  func displayMenu(viewModel: MenuList.Something.ViewModel)
}

class MenuListViewController: UIViewController, MenuListDisplayLogic
{
  var interactor: MenuListBusinessLogic?
  var router: (NSObjectProtocol & MenuListRoutingLogic & MenuListDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MenuListInteractor()
    let presenter = MenuListPresenter()
    let router = MenuListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
//  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
//  {
//    if let scene = segue.identifier {
//      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
//      if let router = router, router.responds(to: selector) {
//        router.perform(selector, with: segue)
//      }
//    }
//  }
  
  // MARK: View lifecycle
  
    @IBOutlet weak var TV: UITableView!
    
    var displayedOrders: [MenuList.Something.ViewModel.ViewModelMenu] = []
    
    override func viewDidLoad()
  {
    super.viewDidLoad()
    TV.dataSource = self
    TV.delegate = self
    TV.separatorStyle = .none
    TV.tableHeaderView = setHeaderView()
    TV.backgroundColor = UIColor(red: 240/255, green: 240/255, blue: 240/255, alpha: 1.0)
    
    let nibName = UINib(nibName: "MenuListTableViewCell", bundle: nil)
    TV.register(nibName, forCellReuseIdentifier: "myCell")
    
    fetchTVData()
  }
    override func viewWillAppear(_ animated: Bool) {
        self.navigationController?.navigationBar.isHidden = true
    }
    
    func setHeaderView() -> UILabel {
        let lbl = UILabel(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: 90))
        lbl.backgroundColor = .black
        lbl.numberOfLines = 0
        lbl.lineBreakMode = .byWordWrapping
        
        let msg1 = NSMutableAttributedString(string: "24 HOURS", attributes: [.font : UIFont.boldSystemFont(ofSize: 24), .foregroundColor: UIColor.white])
        let msg2 = NSMutableAttributedString(string: "\nOPEN", attributes: [.font : UIFont.boldSystemFont(ofSize: 18), .foregroundColor: UIColor.red])
        let msg3 = NSMutableAttributedString(string: "\nAWESOME PLACE", attributes: [.font : UIFont.systemFont(ofSize: 15), .foregroundColor: UIColor.white])
        msg1.append(msg2)
        msg1.append(msg3)
        lbl.attributedText = msg1
        lbl.textAlignment = .center
        
        return lbl
    }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func fetchTVData()
  {
    let request = MenuList.Something.Request()
    interactor?.fetchTVData(request: request)
  }
  
  func displayMenu(viewModel: MenuList.Something.ViewModel)
  {
    displayedOrders = viewModel.menuList
    TV.reloadData()
  }
}
extension MenuListViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedOrders.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "myCell", for: indexPath) as! MenuListTableViewCell
        cell.backgroundColor = .clear
        cell.selectionStyle = .none
        cell.name?.text = displayedOrders[indexPath.row].name
        cell.price?.text = displayedOrders[indexPath.row].price
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        let vc = storyboard?.instantiateViewController(withIdentifier: "bucketList") as! BucketListViewController
        router?.navigateToBucketList(source: self, destination: vc)
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return view.frame.height / 10
    }
    
    
}
